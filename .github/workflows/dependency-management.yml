name: dependency-management

on:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 4 * * 1"

permissions:
  contents: read
  security-events: write

jobs:
  sca-and-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Compile constraints (pip-tools) if inputs exist
        run: |
          python -m pip install --upgrade pip pip-tools
          if [ -f constraints/python-constraints.in ]; then
            pip-compile constraints/python-constraints.in -o constraints/python-constraints.txt --generate-hashes
          elif [ -f requirements.in ]; then
            pip-compile requirements.in -o constraints/python-constraints.txt --generate-hashes
          elif [ -f pyproject.toml ]; then
            pip-compile pyproject.toml -o constraints/python-constraints.txt --generate-hashes || true
          fi

      - name: Install with constraints (if requirements.txt exists)
        run: |
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt -c constraints/python-constraints.txt || true
          fi

      - name: Set up Java (for OWASP Dependency-Check)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: OWASP Dependency-Check (requires NVD API key)
        uses: dependency-check/Dependency-Check_Action@v4.1.0
        with:
          project: "${{ github.repository }}"
          path: "."
          format: "JSON"
          out: "reports"
          args: "--failOnCVSS 8 --enableRetired --nvdApiKey ${{ secrets.NVD_API_KEY }}"

      - name: Python vulnerability scan (pip-audit JSON)
        if: hashFiles('**/requirements.txt') != ''
        run: |
          python -m pip install pip-audit
          pip-audit -r requirements.txt -f json -o reports/pip-audit.json --strict || (echo "pip-audit found vulns"; exit 1)

      - name: npm audit (if package.json exists)
        if: hashFiles('**/package.json') != ''
        run: |
          npm ci --ignore-scripts --no-fund || npm install --ignore-scripts --no-fund
          npm audit --omit=dev --json > reports/npm-audit.json || (echo "npm audit found vulns"; exit 1)

      - name: Build OPA inputs (vulnerability gate)
        run: |
          mkdir -p ci-input
          test -f reports/dependency-check-report.json || echo '{}' > reports/dependency-check-report.json
          test -f reports/pip-audit.json || echo '{"dependencies":[]}' > reports/pip-audit.json
          test -f reports/npm-audit.json || echo '{"metadata":{"vulnerabilities":{"critical":0}}}' > reports/npm-audit.json
          jq -n             --slurpfile dc reports/dependency-check-report.json             --slurpfile pa reports/pip-audit.json             --slurpfile na reports/npm-audit.json             '{depcheck:$dc[0], pipaudit:$pa[0], npmaudit:$na[0]}' > ci-input/vulns.json

      - name: Conftest (vulnerability policy)
        uses: instrumenta/conftest-action@v1
        with:
          files: ci-input/vulns.json
          policy: opa

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-management-reports
          path: |
            reports/
            ci-input/
